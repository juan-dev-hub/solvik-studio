// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  firstName         String
  lastName          String
  encryptedWhatsApp String    // Encrypted WhatsApp number
  email             String?   @unique
  subdomain         String    @unique
  isActive          Boolean   @default(true)
  subscription      Subscription?
  landingPage       LandingPage?
  otpCodes          OtpCode[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("users")
}

model OtpCode {
  id        String   @id @default(uuid())
  userId    String
  code      String
  type      String   // WHATSAPP, EMAIL
  expiresAt DateTime
  used      Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_codes")
}

model LandingPage {
  id             String               @id @default(uuid())
  userId         String               @unique
  isPublished    Boolean              @default(false)
  customDomain   String?              @unique
  seoKeywords    String?
  colorScheme    Json?                // Native JSON type
  sections       LandingPageSection[]
  images         LandingPageImage[]
  content        Json                 // Native JSON type
  contactFormSubmissions ContactFormSubmission[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("landing_pages")
}

model LandingPageSection {
  id            String      @id @default(uuid())
  landingPageId String
  sectionType   String      // HERO, CATALOG, BENEFITS, TESTIMONIALS, MAP, CONTACT, FOOTER
  isEnabled     Boolean     @default(true)
  order         Int
  config        Json?       // Native JSON type
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onDelete: Cascade)

  @@unique([landingPageId, sectionType])
  @@map("landing_page_sections")
}

model LandingPageImage {
  id            String      @id @default(uuid())
  landingPageId String
  imageType     String      // HERO, LOGO, CATALOG, GALLERY
  fileName      String
  originalName  String
  url           String
  size          Int
  mimeType      String
  order         Int?
  createdAt     DateTime    @default(now())
  
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onDelete: Cascade)

  @@map("landing_page_images")
}

model ContactFormSubmission {
  id            String      @id @default(uuid())
  landingPageId String
  formData      Json        // Native JSON type - stores all form field data
  language      String      @default("es")
  ipAddress     String?
  userAgent     String?
  isRead        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onDelete: Cascade)

  @@map("contact_form_submissions")
}

model Subscription {
  id            String            @id @default(uuid())
  userId        String            @unique
  planType      String            // MONTHLY, ANNUAL
  status        String            // ACTIVE, CANCELED, EXPIRED
  priceAmount   Int               // Amount in cents
  currency      String            @default("USD")
  lemonSqueezyId String?          @unique
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean       @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model GlobalConfig {
  id            String   @id @default(uuid())
  key           String   @unique
  value         Json     // Native JSON type
  description   String?
  updatedAt     DateTime @updatedAt

  @@map("global_config")
}

model AdminSession {
  id            String   @id @default(uuid())
  token         String   @unique
  whatsappVerified Boolean @default(false)
  emailVerified    Boolean @default(false)
  ipAddress     String
  userAgent     String
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  @@map("admin_sessions")
}